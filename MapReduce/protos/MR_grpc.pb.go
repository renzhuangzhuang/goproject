// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: MR.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MrServiceClient is the client API for MrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MrServiceClient interface {
	//定义双端流
	GetSStream(ctx context.Context, in *MrRequest, opts ...grpc.CallOption) (MrService_GetSStreamClient, error)
	GetBiStream(ctx context.Context, opts ...grpc.CallOption) (MrService_GetBiStreamClient, error)
}

type mrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMrServiceClient(cc grpc.ClientConnInterface) MrServiceClient {
	return &mrServiceClient{cc}
}

func (c *mrServiceClient) GetSStream(ctx context.Context, in *MrRequest, opts ...grpc.CallOption) (MrService_GetSStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MrService_ServiceDesc.Streams[0], "/MrService/GetSStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mrServiceGetSStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MrService_GetSStreamClient interface {
	Recv() (*MrResponse, error)
	grpc.ClientStream
}

type mrServiceGetSStreamClient struct {
	grpc.ClientStream
}

func (x *mrServiceGetSStreamClient) Recv() (*MrResponse, error) {
	m := new(MrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mrServiceClient) GetBiStream(ctx context.Context, opts ...grpc.CallOption) (MrService_GetBiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MrService_ServiceDesc.Streams[1], "/MrService/GetBiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mrServiceGetBiStreamClient{stream}
	return x, nil
}

type MrService_GetBiStreamClient interface {
	Send(*MrRequest) error
	Recv() (*MrResponse, error)
	grpc.ClientStream
}

type mrServiceGetBiStreamClient struct {
	grpc.ClientStream
}

func (x *mrServiceGetBiStreamClient) Send(m *MrRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mrServiceGetBiStreamClient) Recv() (*MrResponse, error) {
	m := new(MrResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MrServiceServer is the server API for MrService service.
// All implementations must embed UnimplementedMrServiceServer
// for forward compatibility
type MrServiceServer interface {
	//定义双端流
	GetSStream(*MrRequest, MrService_GetSStreamServer) error
	GetBiStream(MrService_GetBiStreamServer) error
	mustEmbedUnimplementedMrServiceServer()
}

// UnimplementedMrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMrServiceServer struct {
}

func (UnimplementedMrServiceServer) GetSStream(*MrRequest, MrService_GetSStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSStream not implemented")
}
func (UnimplementedMrServiceServer) GetBiStream(MrService_GetBiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBiStream not implemented")
}
func (UnimplementedMrServiceServer) mustEmbedUnimplementedMrServiceServer() {}

// UnsafeMrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MrServiceServer will
// result in compilation errors.
type UnsafeMrServiceServer interface {
	mustEmbedUnimplementedMrServiceServer()
}

func RegisterMrServiceServer(s grpc.ServiceRegistrar, srv MrServiceServer) {
	s.RegisterService(&MrService_ServiceDesc, srv)
}

func _MrService_GetSStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MrRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MrServiceServer).GetSStream(m, &mrServiceGetSStreamServer{stream})
}

type MrService_GetSStreamServer interface {
	Send(*MrResponse) error
	grpc.ServerStream
}

type mrServiceGetSStreamServer struct {
	grpc.ServerStream
}

func (x *mrServiceGetSStreamServer) Send(m *MrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MrService_GetBiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MrServiceServer).GetBiStream(&mrServiceGetBiStreamServer{stream})
}

type MrService_GetBiStreamServer interface {
	Send(*MrResponse) error
	Recv() (*MrRequest, error)
	grpc.ServerStream
}

type mrServiceGetBiStreamServer struct {
	grpc.ServerStream
}

func (x *mrServiceGetBiStreamServer) Send(m *MrResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mrServiceGetBiStreamServer) Recv() (*MrRequest, error) {
	m := new(MrRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MrService_ServiceDesc is the grpc.ServiceDesc for MrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MrService",
	HandlerType: (*MrServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSStream",
			Handler:       _MrService_GetSStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBiStream",
			Handler:       _MrService_GetBiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "MR.proto",
}
